{"version":3,"sources":["components/AmchartsWrapper/AmchartsWrapper.jsx","components/AmchartsWrapper/index.js","App.js","reportWebVitals.js","index.js"],"names":["am4core","am4themes_animated","AmchartsWrapper","chart","am4charts","paddingRight","data","visits","i","Math","round","random","push","date","Date","name","value","xAxes","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","cursor","scrollbarX","this","dispose","id","style","width","height","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAKAA,IAAiBC,K,ICHFC,E,uKDMb,WACE,IAAIC,EAAQH,IAAe,WAAYI,KAEvCD,EAAME,aAAe,GAIrB,IAFA,IAAIC,EAAO,GACPC,EAAS,GACJC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,GAAUE,KAAKC,OAAOD,KAAKE,SAAW,GAAM,GAAK,GAAKF,KAAKE,SAAW,IACtEL,EAAKM,KAAK,CAAEC,KAAM,IAAIC,KAAK,KAAM,EAAGN,GAAIO,KAAM,OAASP,EAAGQ,MAAOT,IAGnEJ,EAAMG,KAAOA,EAEEH,EAAMc,MAAML,KAAK,IAAIR,KAC3Bc,SAASC,KAAKC,SAASC,SAAW,EAE3C,IAAIC,EAAYnB,EAAMoB,MAAMX,KAAK,IAAIR,KACrCkB,EAAUE,QAAQC,UAAW,EAC7BH,EAAUJ,SAASQ,SAAW,GAE9B,IAAIC,EAASxB,EAAMwB,OAAOf,KAAK,IAAIR,KACnCuB,EAAOC,WAAWC,MAAQ,OAC1BF,EAAOC,WAAWE,OAAS,QAE3BH,EAAOI,YAAc,iBACrB5B,EAAM6B,OAAS,IAAI5B,IAEnB,IAAI6B,EAAa,IAAI7B,IACrB6B,EAAWN,OAAOf,KAAKe,GACvBxB,EAAM8B,WAAaA,EAEnBC,KAAK/B,MAAQA,I,kCAGf,WACM+B,KAAK/B,OACP+B,KAAK/B,MAAMgC,Y,oBAIf,WACE,OACE,qBAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GA5C3BC,aEIfC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3f0a4b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nclass AmchartsWrapper extends Component {\r\n  componentDidMount() {\r\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n\r\n    chart.paddingRight = 20;\r\n\r\n    let data = [];\r\n    let visits = 10;\r\n    for (let i = 1; i < 366; i++) {\r\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\r\n      data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\r\n    }\r\n\r\n    chart.data = data;\r\n\r\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n    dateAxis.renderer.grid.template.location = 0;\r\n\r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.tooltip.disabled = true;\r\n    valueAxis.renderer.minWidth = 35;\r\n\r\n    let series = chart.series.push(new am4charts.LineSeries());\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"value\";\r\n\r\n    series.tooltipText = \"{valueY.value}\";\r\n    chart.cursor = new am4charts.XYCursor();\r\n\r\n    let scrollbarX = new am4charts.XYChartScrollbar();\r\n    scrollbarX.series.push(series);\r\n    chart.scrollbarX = scrollbarX;\r\n\r\n    this.chart = chart;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.chart) {\r\n      this.chart.dispose();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AmchartsWrapper;","import AmchartsWrapper from './AmchartsWrapper.jsx';\r\n\r\nexport default AmchartsWrapper;\r\n","import './App.css';\r\nimport AmchartsWrapper from './components/AmchartsWrapper';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AmchartsWrapper/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}